import math
from tqdm import tqdm
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import random
import math
import plotly.graph_objects as go
from netCDF4 import Dataset
import netCDF4 as nc4
from plotly.subplots import make_subplots

n= 100 #!Anzahl Partikel
ubalken = np.float64(5) #!m/s
wbalken =np.float64( 0) #!m/s
zq =np.float64( 45) #!m
xq =np.float64( 51) #!m
counter=np.float64(0)
xgrenz= np.float64(2000)# !m

ges=[]
tl = np.float64(100)  #s Zeit
dt = np.float64(0.4) # Zeitschritt
sigu= np.float64(0) #m/s
sigw= np.float64(0.39) #m/s
rl= math.exp(- dt/tl)
nx = 1000
ny = 50
nz = 2000
dx = 10
dy = 10
dz = 10
ui=5

bins=np.arange(0, 2000,2)
positionsliste=[]
xvalues=[]
zvalues=[]
c=np.zeros((nx, ny, nz))
def gauss():
    Q= 150 #!540 kg/h also 5.4e+8mg/h und so 150000 
    ubalken= 5
    h= 100
    zq= 100
    xq=0
    yq=250
    fg=0.504
    fk=0.818
    gg=0.265
    gk=0.818
    for i in range( 1, nx+1):
        for j in range(1,ny+1):
            for k in range(1, nz+1):
       	        dey = fg*((dx*i)**fk)
       	        dez = gg*((dx*i)**gk)
                c[i-1,j-1,k-1] =(Q/(2* math.pi*dey*dez*ubalken))*math.exp((-((j*dy)-yq)**2)/(2*dey**2)) *(math.exp((-((k*dz)-h)**2)/(2*dez**2)) +math.exp((-((k*dz)+h)**2)/(2*dez**2)))
    return
cdc=[]
nxx=2000
nzz=2000
cdkack=[]
cd=np.zeros((nxx, nzz))
def gauss2d():
    Q= 150 #!540 kg/h also 5.4e+8mg/h und so 150000 
    ubalken= 5
    dx=2
    dz=2
    for i,indexei in zip(range(1 , nzz),(range(1,nxx,2))):
        for j,indexej in zip(range(1,nxx),(range(1,nxx,2))):
            #dez = gg*((dx*i)**gk)
       	    #dez = 2*sigw**2*tl*((i/ubalken)- ubalken +ubalken*math.exp(- (i/(ubalken*tl))))
            dez= 2*sigw**2*tl*((i/ubalken)-tl +tl*math.exp(-i/(ubalken*tl)))
            cd[j,i]=(Q/(math.sqrt(2* math.pi)*math.sqrt(dez)*ubalken) *(math.exp((-((j*dx)-zq)**2)/(2*dez)) +math.exp((-((j*dz)+zq)**2)/(2*dez))))
            #cdc.append(co)
    return

def concentration(nj):
    dx=2
    dz=2
    q= 150
    dt= 0.4
    c= q*(nj*dt)/(n*dx*dz)

    return c
def positionen(xi,wi,zi):
    
    rr=np.float64( random.gauss(0,1))
    xi= xi + ui*dt
    wi= rl*wi + math.sqrt((1 - rl**2))*sigw* rr
    zi= zi + wi*dt
    return xi,wi,zi

for i in tqdm(range(n)):
    xi=xq
    zi=zq
    ui=ubalken
    wi=wbalken
    posi=[]


    while (xi<= xgrenz):
        if (zi<0):
            zi=-zi
            wi= -wi
            xi,wi,zi =positionen(xi,wi,zi)
            posi.append([xi,zi])
            xvalues.append(xi)
            zvalues.append(zi)
            positionsliste.append([xi,zi])


        else:
            #print(xi)
            xi,wi,zi =positionen(xi,wi,zi)
            #print(xi)
            posi.append([xi,zi])
            xvalues.append(xi)
            zvalues.append(zi)
            positionsliste.append([xi,zi])

    ges.append(posi)
    """
    df=pd.DataFrame.from_dict({
        'xvalues': xvalues,
        'zvalues': zvalues
    })
    df['xvaluesort']=pd.cut(df['xvalues'],bins, precision=6)
    df['zvaluesort']=pd.cut(df['zvalues'],bins, precision=6)
    """
    """
    df=pd.DataFrame.from_dict({
        'values': posi,
    })
df['valuesort']=pd.qcut(df['values'],100, precision=6)
"""

xvalues.pop()
zvalues.pop()
df=pd.DataFrame.from_dict({
        'xvalues': xvalues,
        'zvalues': zvalues
    })
df['xvaluesort']=pd.cut(df['xvalues'],bins, precision=6)
df['zvaluesort']=pd.cut(df['zvalues'],bins, precision=6)

sx= pd.Series(xvalues)
sx.value_counts(bins=bins)#.sort_index()

alla=df.value_counts(["xvaluesort", "zvaluesort"])

print(alla.head())
klar=[]
cplot=[]
xplot=[]
zplot=[]
cklar=[]
clar=[]
for i in range(len(alla)):
    cplot.append(concentration(alla.values[i]))
    #close.append(gauss2d())
    xplot.append(alla.index.values[i][0].mid)
    zplot.append(alla.index.values[i][1].mid)
    clar.append([alla.index.values[i][0].mid,alla.index.values[i][1].mid])
    cklar.append([alla.index.values[i][0].mid,alla.index.values[i][1].mid,alla.values[i]])
    klar.append([alla.index.values[i][0].mid,alla.index.values[i][1].mid,alla.values[i],concentration(alla.values[i])])


cc=np.zeros((nzz,nxx))
print(max(cplot))
for i,j,k in zip( xplot, zplot,cplot):
    cc[int(j),int(i)]=k
print(cc)  

gauss2d()

f = nc4.Dataset('koks.nc','w', format='NETCDF4') #'w' stands for write
#tempgrp = f.createGroup('Temp_data')
#tempgrp.createDimension('c', (n))
f.createDimension('x', nxx)
f.createDimension('z', nzz)
cnet= f.createVariable('c', 'f8', ('x','z'))
xnet= f.createVariable('x', 'f8', 'x')
znet= f.createVariable('z', 'f8', 'z')

cnet[:,:]=cd
xnet[:]=[x for x in range(0,nxx)]
znet[:]=[x for x in range(0,nzz)]
f.close()

print(cd)
d = nc4.Dataset('mc.nc','w', format='NETCDF4') #'w' stands for write
d.createDimension('x', nzz)
d.createDimension('z', nxx)
cnet= d.createVariable('c', 'f8', ('x','z'))
xnet= d.createVariable('x', 'f8', 'x')
znet= d.createVariable('z', 'f8', 'z')

cnet[:,:]=cc
xnet[:]=[x for x in range(0,nzz)]
znet[:]=[x for x in range(0,nxx)]
d.close()


lig = make_subplots(    rows=2,
    specs=[[{"type": "contour"}],
            [{"type": "contour"}]],
)

lig.add_trace(
    go.Contour(
        z=cplot,
        x=xplot,#.insert(, # horizontal axis
        y=zplot, # vertical axis
        contours_coloring='lines',
        contours=dict(
            start=0.1,
            end=0.5,
            size=0.1,
        ),
    ), row=1, col=1)


lig.show()
#lig.write_image("Ãœbung_3/conturallagaus.png")
